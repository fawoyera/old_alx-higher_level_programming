Test file for a function that divides a matrix
Function prototype:
	matrix_divided(matrix, div)

Args:
	matrix	- the matrix to divide
	div	- the divisor

Returns:
	the new matrix

First Import the function "matrix_divided" from the module "2-matrix_divided"
	>>> import importlib
	>>> matrix_divided = importlib.import_module("2-matrix_divided")
	>>> matrix_divided = matrix_divided.matrix_divided

Now Use it in the following examples:
	>>> matrix_divided([3, 2], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[2 + 3j, 4], [3, 5]], 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided(4, 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[2, 3], [1, 3, 5]], 5)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

	>>> matrix_divided([[2, 3], [4, 7]], 3 + 2j)
	Traceback (most recent call last):
	...
	TypeError: div must be a number

	>>> matrix_divided([[2, 4], [5, 9]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

	>>> matrix_divided([[2, 3], [3, 4]])
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

	>>> print(m := matrix_divided([[1, 8], [3, -6]], 4))
	[[0.25, 2.0], [0.75, -1.5]]

	>>> print(n := matrix_divided([[1, 2, 3], [4, 5, 6]], 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
